name: Create and publish a Docker image
on:
  push:
    branches: ['deploy-dev']
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Set "yes" to force rebuild images'
        required: true
        default: 'no'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image of the API service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: true
          no-cache: true
          platforms: linux/amd64
          tags: 'ghcr.io/hetaro-labs/showtime-ai-api:latest'

      - name: Build and push Docker image of the demo UI service
        uses: docker/build-push-action@v5
        with:
          context: .
          build-args: |
            API_URL=https://ai-api.dev.showtime-ai.com
          file: ./apps/demo-ui/Dockerfile
          push: true
          no-cache: true
          platforms: linux/amd64
          tags: 'ghcr.io/hetaro-labs/showtime-ai-demo-ui:latest'

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-image
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env file and GCP service account key file
        run: |
          echo "Generate GCP service account key file"
          echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" | base64 -d > gcp-credentials.json
          echo "Generating .env file"
          echo "DEBUG=apps:*" >> .env
          echo "JWT_SECRET=${{ vars.JWT_SECRET }}" >> .env
          echo "GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json" >> .env
          echo "GOOGLE_CLOUD_PROJECT=${{ vars.GOOGLE_CLOUD_PROJECT }}" >> .env
          echo "GOOGLE_CLOUD_LOCATION=${{ vars.GOOGLE_CLOUD_LOCATION }}" >> .env
          echo "GOOGLE_VERTEXAI_TEXT_MODEL=${{ vars.GOOGLE_VERTEXAI_TEXT_MODEL }}" >> .env
          echo "GOOGLE_CLOUD_DATASTORE_DATABASE=${{ vars.GOOGLE_CLOUD_DATASTORE_DATABASE }}" >> .env
          echo "GOOGLE_CLOUD_REDIS_INSTANCE_ID=${{ vars.GOOGLE_CLOUD_REDIS_INSTANCE_ID }}" >> .env
          echo "GOOGLE_CSE_ID=${{ vars.GOOGLE_CSE_ID }}" >> .env
          echo "GOOGLE_CSE_API_KEY=${{ vars.GOOGLE_CSE_API_KEY }}" >> .env
          echo "OPENWEATHER_API_KEY=${{ vars.OPENWEATHER_API_KEY }}" >> .env
          echo "TELEGRAM_BOT_TOKEN=${{ vars.TELEGRAM_BOT_TOKEN }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "COINMARKETCAP_API_KEY=${{ secrets.COINMARKETCAP_API_KEY }}" >> .env
          if [ "${{ github.ref }}" == "refs/heads/deploy-dev" ]; then
            echo "VIRTUAL_HOST=${{ vars.DEV_VIRTUAL_HOST }}" >> .env
            echo "LETSENCRYPT_HOST=${{ vars.DEV_VIRTUAL_HOST }}" >> .env
            echo "DEMO_UI_VIRTUAL_HOST=${{ vars.DEV_DEMO_UI_VIRTUAL_HOST }}" >> .env
            echo "DEMO_UI_LETSENCRYPT_HOST=${{ vars.DEV_DEMO_UI_VIRTUAL_HOST }}" >> .env
          else
            echo "VIRTUAL_HOST=${{ vars.PROD_VIRTUAL_HOST }}" >> .env
            echo "LETSENCRYPT_HOST=${{ vars.PROD_VIRTUAL_HOST }}" >> .env
            echo "DEMO_UI_VIRTUAL_HOST=${{ vars.PROD_DEMO_UI_VIRTUAL_HOST }}" >> .env
            echo "DEMO_UI_LETSENCRYPT_HOST=${{ vars.PROD_DEMO_UI_VIRTUAL_HOST }}" >> .env
          fi

      # Copy docker-compose and .env files to target server
      - name: copy files to target server via scp
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          port: 22
          key: ${{ secrets.DEPLOY_KEY }}
          source: './docker-compose.yml,./.env,gcp-credentials.json'
          target: '~/.deploy/${{ github.event.repository.name }}/'
      # Deploy Docker image with your application using `docker compose up app` remotely
      - name: remote docker-compose up via ssh
        uses: appleboy/ssh-action@v1.0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GH_DEPLOY_TOKEN }}
          GITHUB_USER: ${{ secrets.GH_DEPLOY_USER }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          envs: GITHUB_TOKEN,USERNAME
          script: |
            echo $GITHUB_TOKEN | docker login ghcr.io -u $GITHUB_USER --password-stdin
            cd ~/.deploy/${{ github.event.repository.name }}
            docker compose -f ./docker-compose.yml down
            docker compose -f ./docker-compose.yml pull
            docker compose -f ./docker-compose.yml up -d
